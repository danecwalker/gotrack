(function(){
  'use strict';

	var location = window.location
	var document = window.document

  {{if .compatible}}
    var scriptEl = document.getElementById('{{.name}}')
  {{else}}
	  var scriptEl = document.currentScript
  {{end}}
  var endpoint = scriptEl.getAttribute('data-api') || defaultEndpoint(scriptEl)

  function onIgnoredEvent(reason, options) {
    if (reason) console.warn('Ignoring Event: ' + reason)
	  options && options.callback && options.callback()
  }

  function defaultEndpoint(el) {
    {{if .compatible}}
      var pathArray = el.src.split('/')
      var protocol = pathArray[0]
      var host = pathArray[2]
      return protocol + '//' + host  + "{{.api}}"
    {{else}}
      return new URL(el.src).origin + "{{.api}}"
	  {{end}}
  }


  function trigger(eventName, options) {
    {{if not .dev}}
      if (/^localhost$|^127(\.[0-9]+){0,2}\.[0-9]+$|^\[::1?\]$/.test(location.hostname) || location.protocol === 'file:') {
        return onIgnoredEvent('dev', options)
      }
      if (window._phantom || window.__nightmare || window.navigator.webdriver || window.Cypress) {
        return onIgnoredEvent(null, options)
      }
    {{end}}
    try {
      if (window.localStorage.{{.name}}_ignore === 'true') {
        return onIgnoredEvent('localStorage flag', options)
      }
    } catch (e) {}
    {{if .skip}}
      var dataIncludeAttr = scriptEl && scriptEl.getAttribute('data-include')
      var dataExcludeAttr = scriptEl && scriptEl.getAttribute('data-exclude')

      if (eventName === 'pageview') {
        var isIncluded = !dataIncludeAttr || (dataIncludeAttr && dataIncludeAttr.split(',').some(pathMatches))
        var isExcluded = dataExcludeAttr && dataExcludeAttr.split(',').some(pathMatches)

        if (!isIncluded || isExcluded) return onIgnoredEvent('exclusion rule', options)
      }

      function pathMatches(wildcardPath) {
        var actualPath = location.pathname
        return actualPath.match(new RegExp('^' + wildcardPath.trim().replace(/\*\*/g, '.*').replace(/([^\.])\*/g, '$1[^\\s\/]*') + '\/?$'))
      }
	  {{end}}

    var payload = {}
	  payload.n = eventName
    {{if .manual}}
      payload.u = options && options.u ? options.u : location.href
    {{else}}
	    payload.u = location.href
	  {{end}}
    payload.d = scriptEl.getAttribute('data-domain')
	  payload.r = document.referrer || null
    if (options && options.meta) {
	    payload.m = JSON.stringify(options.meta)
    }
    if (options && options.props) {
	    payload.p = options.props
    }
    {{if .revenue}}
      if (options && options.revenue) {
        payload.$ = options.revenue
      }
	  {{end}}

    {{if .props}}
      var propAttributes = scriptEl.getAttributeNames().filter(function (name) {
        return name.substring(0, 6) === 'event-'
      })

      var props = payload.p || {}

      propAttributes.forEach(function(attribute) {
        var propKey = attribute.replace('event-', '')
        var propValue = scriptEl.getAttribute(attribute)
        props[propKey] = props[propKey] || propValue
      })

      payload.p = props
    {{end}}

    var request = new XMLHttpRequest();
    request.open('POST', endpoint, true);
    request.setRequestHeader('Content-Type', 'application/json');
	  request.send(JSON.stringify(payload))
    request.onreadystatechange = function() {
      if (request.readyState === 4) {
	      options && options.callback && options.callback()
      }
    }
  }

  var queue = (window.{{.name}} && window.{{.name}}.q) || []
  window.{{.name}} = trigger
  for (var i = 0; i < queue.length; i++) {
	  trigger.apply(this, queue[i])
  }

  {{if not .manual}}
    var lastPage;

    function page() {
      if (lastPage === location.pathname) return;
	    lastPage = location.pathname
      trigger('pageview')
    }

	  var his = window.history
    if (his.pushState) {
      var originalPushState = his['pushState']
      his.pushState = function() {
	    originalPushState.apply(this, arguments)
	    page()
    }
      window.addEventListener('popstate', page)
    }

    function handleVisibilityChange() {
      if (!lastPage && document.visibilityState === 'visible') {
        page()
      }
    }

    if (document.visibilityState === 'prerender') {
      document.addEventListener('visibilitychange', handleVisibilityChange);
    } else {
      page()
    }
  {{end}}

  {{if orany .outbound .downloads .custom}}
    {{template "customEvents" .}}
  {{end}}
})()






