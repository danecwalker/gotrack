// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlite

import (
	"context"
	"database/sql"
	"time"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events (session_id, event_name, url, referrer, utm_source, utm_medium, utm_campaign, utm_term, utm_content, created_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateEventParams struct {
	SessionID   string
	EventName   string
	Url         string
	Referrer    sql.NullString
	UtmSource   sql.NullString
	UtmMedium   sql.NullString
	UtmCampaign sql.NullString
	UtmTerm     sql.NullString
	UtmContent  sql.NullString
	CreatedAt   time.Time
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.ExecContext(ctx, createEvent,
		arg.SessionID,
		arg.EventName,
		arg.Url,
		arg.Referrer,
		arg.UtmSource,
		arg.UtmMedium,
		arg.UtmCampaign,
		arg.UtmTerm,
		arg.UtmContent,
		arg.CreatedAt,
	)
	return err
}

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (id, language, country, browser, os, screen_type, created_at)
VALUES (?, ?, ?, ?, ?, ?, ?) ON CONFLICT(id) DO NOTHING
`

type CreateSessionParams struct {
	ID         string
	Language   sql.NullString
	Country    sql.NullString
	Browser    sql.NullString
	Os         sql.NullString
	ScreenType sql.NullString
	CreatedAt  time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession,
		arg.ID,
		arg.Language,
		arg.Country,
		arg.Browser,
		arg.Os,
		arg.ScreenType,
		arg.CreatedAt,
	)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, language, country, browser, os, screen_type, created_at FROM sessions
WHERE id = ? LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Language,
		&i.Country,
		&i.Browser,
		&i.Os,
		&i.ScreenType,
		&i.CreatedAt,
	)
	return i, err
}
